{"version":3,"sources":["components/IssuesList/IssuesList.tsx","components/StatusList/StatusList.tsx","components/UpcomingList/UpcomingList.tsx","components/CurrentVersion/CurrentVersion.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["githubProject","IssuesList","issueItems","className","key","this","props","error","undefined","issues","map","issue","creationDate","Date","created_at","updateDate","updated_at","updateOrCloseDate","toLocaleDateString","state","title","number","href","html_url","length","newestMilestone","milestoneUrl","milestoneNumber","milestoneRelease","reportIncident","Component","StatusList","refreshIssues","bind","Axios","get","response","setState","data","issueLabel","UpcomingList","milestoneResponse","currentMilestone","reduce","a","b","due_on","issuesThisMilestone","latestDueDate","dt","setDate","getDate","milestoneTitle","filter","milestone","CurrentVersion","currentVersion","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.433fcaf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './IssuesList.scss';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesHtmlUrl: string = 'https://github.com/' + githubProject + '/issues?q=';\nconst newIssueUrl: string = 'https://github.com/' + githubProject + '/issues/new';\n\ninterface IssueProps {\n    issues?: any;\n    error?: any;\n    refreshIssues?: any;\n    title?: any;\n    issueLabel?: any;\n    newestMilestone?: any;\n    milestoneNumber?: any;\n}\n\nclass IssuesList extends Component<IssueProps, {}> {\n    render(): JSX.Element {\n        let issueItems: any = (\n            <p className='alert alert-info' key='info'>Please wait, loading status information</p>\n        );\n        if (this.props.error) {\n            issueItems = (\n                <p className='alert alert-danger' key='error'>{this.props.error}</p>\n            );\n        } else if (this.props.issues !== undefined) {\n            issueItems = this.props.issues.map((issue: any) => {\n                const creationDate: Date = new Date(issue.created_at);\n                const updateDate: Date = new Date(issue.updated_at);\n                let updateOrCloseDate: string = 'Updated: ' + updateDate.toLocaleDateString();\n                if (issue.state === 'closed') {\n                    updateOrCloseDate = 'Resolved: ' + updateDate.toLocaleDateString();\n                }\n\n                return (\n                    <div className='panel'>\n                        <div>\n                            <p className='issue-title'>\n                                {(issue.state === 'closed' ? 'RESOLVED: ' : '') + issue.title + ' (#' + issue.number + ')'}\n                            </p>\n                        </div>\n                        <div>\n                            <span className='date'>{'Reported: ' + creationDate.toLocaleDateString()}</span>\n                            <br></br>\n                            <span className='date'>{updateOrCloseDate}</span>\n                        </div>\n                        <a className='link view-issue' href={issue.html_url}>{'View on GitHub'}</a>\n                    </div>\n                );\n            });\n            if (issueItems.length === 0) {\n                if (this.props.newestMilestone) {\n                    issueItems = (\n                        <p className='alert alert-danger'>\n                            {'No completed issues!'}\n                        </p>\n                    );\n                } else {\n                    issueItems = (\n                        <p className='alert alert-success'>\n                            {'No incidents found!'}\n                        </p>\n                    );\n                }\n            }\n        }\n\n        let milestoneUrl: string = 'https://github.com/' + githubProject + '/milestone/';\n        milestoneUrl += this.props.milestoneNumber;\n        const milestoneRelease: boolean = (this.props.newestMilestone !== undefined) ? true : false;\n        // const seeMilestoneLink: JSX.Element = (this.props.newestMilestone !== undefined) ? (<a className='link' href={milestoneUrl}> {'See current milestone'} </a>) : (<a className='link' href={issuesHtmlUrl}> {'View all on GitHub'}</a>);\n        const reportIncident: JSX.Element = (this.props.newestMilestone !== undefined) ? (<></>) : (<a className='button' href={newIssueUrl}>Report a new issue</a>);\n\n        return(\n            <div>\n                <div className='div-title'>\n                    {this.props.title}\n\n                    <span className='new-issue-position'>{reportIncident}</span>\n                    {milestoneRelease ? (\n                        <span className='view-milestone'>\n                            <a className='link' href={milestoneUrl}> {'See current milestone'} </a>\n                        </span>\n                    ) : (\n                        <span className='view-all-position'>\n                            <a className='link' href={issuesHtmlUrl}> {'View all on GitHub'} </a>\n                        </span>\n                    )}\n                </div>\n                <div className='flex-container'>\n                    {issueItems}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default IssuesList;\n","import React, { Component } from 'react';\nimport IssuesList from '../IssuesList/IssuesList';\nimport Axios from 'axios';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesStatusApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/issues?labels=status';\n\ninterface StatusState {\n    issues: any;\n    error: any;\n}\n\nclass StatusList extends Component<{}, StatusState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            issues: undefined,\n            error: undefined\n        };\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    async componentDidMount(): Promise<void> {\n        await this.refreshIssues();\n    }\n\n    async refreshIssues(): Promise<void> {\n\n        const response: any = await Axios.get(issuesStatusApiUrl);\n        if (response) {\n            this.setState({\n                issues : response.data\n            });\n        } else {\n            this.setState({\n                error : 'Cannot load incidents from Github, sorry.'\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        if (this.state.issues || this.state.error) {\n            return (\n                <div>\n                    <IssuesList\n                        key='issues'\n                        issues={this.state.issues}\n                        error={this.state.error}\n                        refreshIssues={this.refreshIssues}\n                        title='Known current issues'\n                        issueLabel='status'>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default StatusList;\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport IssuesList from '../IssuesList/IssuesList';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst issuesNextApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/issues?labels=next&state=closed&per_page=100';\nconst allMilestones: string = 'https://api.github.com/repos/' + githubProject + '/milestones';\n\ninterface UpcomingState {\n    issues: any;\n    error: any;\n    newestMilestone: any;\n}\n\nclass UpcomingList extends Component<{}, UpcomingState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            issues: undefined,\n            error: undefined,\n            newestMilestone: undefined\n        };\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    async componentDidMount(): Promise <void> {\n        const milestoneResponse: any = await Axios.get(allMilestones);\n        if (milestoneResponse) {\n            const currentMilestone: any = milestoneResponse.data.reduce((a: any, b: any) => {\n                return (a.due_on > b.due_on) ? a : b;\n            });\n            this.setState({\n                newestMilestone: currentMilestone\n            });\n        } else {\n            this.setState({\n                error : 'Cannot load from Github, sorry.'\n            });        }\n\n        await this.refreshIssues();\n    }\n\n    async refreshIssues(): Promise<void> {\n        const response: any = await Axios.get(issuesNextApiUrl);\n        if (response) {\n            this.setState({\n                issues: response.data\n            });\n        } else {\n            this.setState({\n                error : 'Cannot load from Github, sorry.'\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        let latestDueDate: string = '';\n        let milestoneNumber: string = '';\n        let issuesThisMilestone: any;\n        if (this.state.newestMilestone) {\n            const dt: Date = new Date(this.state.newestMilestone.due_on);\n\n            // Set expected release date to milestone due_date minus days (thursday before)\n            dt.setDate(dt.getDate() - 4);\n\n            latestDueDate = dt.toLocaleDateString();\n            milestoneNumber = this.state.newestMilestone.number;\n        }\n\n        if (this.state.issues || this.state.error) {\n            if (this.state.issues && this.state.newestMilestone) {\n                const milestoneTitle: string = this.state.newestMilestone.title;\n\n                issuesThisMilestone = this.state.issues.filter((issue: any) => {\n                    if (issue.milestone) {\n                        if (issue.milestone.title === milestoneTitle) {\n                            return issue;\n                        }\n                    }\n                });\n            }\n\n            return (\n                <div>\n                    <IssuesList\n                        key='issues'\n                        issues={issuesThisMilestone}\n                        error={this.state.error}\n                        refreshIssues={this.refreshIssues}\n                        title={'Fixed in upcoming release (expected on ' + latestDueDate + ')'}\n                        issueLabel='next'\n                        newestMilestone= {this.state.newestMilestone}\n                        milestoneNumber={milestoneNumber}>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default UpcomingList;\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport './CurrentVersion.scss';\n\nconst githubProject: string = 'IBM-Blockchain/blockchain-vscode-extension';\n\n// Github URLs\nconst currentReleaseApiUrl: string = 'https://api.github.com/repos/' + githubProject + '/releases/latest';\nconst allReleases: string = 'https://github.com/' + githubProject + '/releases/';\n\ninterface VersionState {\n    currentVersion: string;\n}\n\nclass CurrentVersion extends Component<{}, VersionState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentVersion: ''\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const response: any = await Axios.get(currentReleaseApiUrl);\n        if (response) {\n            this.setState({\n                currentVersion : response.data.name\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        if (this.state.currentVersion.length !== 0) {\n            return(\n                <p className='latest-version'>\n                    {'Latest release: '}\n                    <a className='link' href={allReleases}>\n                        {this.state.currentVersion}\n                    </a>\n                </p>\n            );\n        } else {\n            return <div/>;\n        }\n    }\n}\n\nexport default CurrentVersion;\n","import React, { Component } from 'react';\nimport StatusList from './components/StatusList/StatusList';\nimport UpcomingList from './components/UpcomingList/UpcomingList';\nimport './App.scss';\nimport CurrentVersion from './components/CurrentVersion/CurrentVersion';\n\nclass App extends Component {\n    render(): JSX.Element {\n        return (\n            <div className='app-container'>\n                <div>\n                    <p className='status'>Status</p>\n                    <h1>IBM Blockchain Platform Extension for VS Code</h1>\n                    <CurrentVersion/>\n                    <p className='description'>Check this page for information on any current incidents effecting the latest version of the IBM Blockchain Platform extension for Visual Studio Code, as well as planned content for the next release.</p>\n                </div>\n                <div className='div-width'>\n                    <StatusList></StatusList>\n                </div>\n\n                <div className='div-width'>\n                    <UpcomingList></UpcomingList>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}