{"version":3,"sources":["icon_light.svg","components/IssuesList.js","components/StatusList.js","components/UpcomingList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","githubProject","IssuesList","issue","milestone","issueLabels","labels","bug","map","label","name","className","issueItems","key","this","props","error","undefined","issues","newestMilestone","found","title","creationDate","Date","created_at","updateDate","updated_at","updateOrCloseDate","toLocaleDateString","state","number","getLabel","str","lines","split","output","i","length","line","result","exec","order","push","toString","markDownParser","body","href","html_url","comments","spinnerClass","refreshing","milestoneUrl","milestoneNumber","seeMilestoneLink","onClick","refreshIssues","Component","StatusList","bind","e","preventDefault","setState","updateIssues","data","setTimeout","$","get","url","success","issueLabel","UpcomingList","reduce","a","b","due_on","latestDueDate","dt","setDate","getDate","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f1ea39ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon_light.ec17a1ea.svg\";","import React, { Component } from 'react';\nimport '../App.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nlet githubProject = 'IBM-Blockchain/blockchain-vscode-extension';\n\n//Github URLs\nlet issuesHtmlUrl = 'https://github.com/'+githubProject+'/issues?q=';\nlet newIssueUrl = 'https://github.com/'+githubProject+'/issues/new';\n\nconst markDownParser = function(str){\n    var lines = str.split(\"\\n\");\n    var output = [];\n    for(var i=0;i<lines.length;i++){\n        var line=lines[i];\n        var titleRegex = /^(\\#+)\\s+(.*)/ig;\n        var result = titleRegex.exec(line)\n        if (result){\n            var order = result[1].length;\n            output.push(\n            <h key={i}>\n                {(order+2).toString()}\n                {result[2]}\n            </h>\n            )\n            continue;\n        }\n        output.push(\n            <p key={i}>\n                {line}\n            </p>\n        )\n    }\n    return output;\n}\n\nclass IssuesList extends Component {\n    getLabel(issue) {\n        if (issue.milestone) {\n            let labelJSX;\n\n            let issueLabels = issue.labels;\n            let bug = false;\n            issueLabels.map((label) => {\n                if (label.name === 'bug') {\n                    bug = true;\n                }\n            });\n\n            if (bug) {\n                labelJSX = (\n                <h3 className='label bg-bug'> {'bug'} \n                </h3>\n                )\n            } else {\n                labelJSX = (\n                <h3 className='label bg-feature'> {'feature'} \n                </h3>\n                )\n            }\n            return labelJSX\n\n        } else {\n            return ''\n        }\n    }\n\n    render(){\n        let issueItems = (\n            <p className='alert alert-info' key='info'>Please wait, loading status information</p>\n        );\n        if (this.props.error) {\n            issueItems = (\n                <p className='alert alert-danger' key='error'>{this.props.error}</p>\n            );\n        } else if (this.props.issues !== undefined) {\n            issueItems = this.props.issues.map((issue) => {\n                if (this.props.newestMilestone) {\n                    let found = false;\n\n                    if (issue.milestone) {\n                        if (issue.milestone.title === this.props.newestMilestone.title)\n                        found = true;\n                    }\n\n                    if (!found) {\n                        return;\n                    }\n                }\n\n                let creationDate = new Date(issue.created_at);\n                let updateDate = new Date(issue.updated_at);\n                let updateOrCloseDate = 'Updated: '+ updateDate.toLocaleDateString();\n                let className = \"panel-danger\";\n                if (issue.state === 'closed') {\n                    className = 'panel-success';\n                    updateOrCloseDate = 'Resolved: ' + updateDate.toLocaleDateString();\n                }\n\n                return (\n                    <div className={\"panel \" + className}>\n                        <div className=\"panel-heading\">\n                            <h3 className='panel-title'>\n                                {(issue.state === 'closed' ? 'RESOLVED: ' : '') + issue.title + ' (#' + issue.number + ')'}\n                            </h3>\n                            {this.getLabel(issue)}\n                        </div>\n                        <div className='panel-body'>\n                            <p>\n                                <span>{'Reported: ' + creationDate.toLocaleDateString()}</span>\n                                <span className='float-right'>{updateOrCloseDate}</span>\n                            </p>\n                            <hr className='hr'></hr>\n                            {issue.state === 'open' ? markDownParser(issue.body): ''}\n                            <p>\n                                <a href={issue.html_url}>{'View on GitHub (' + issue.comments + ' comments so far)'}</a>\n                            </p>\n                        </div>\n                    </div>\n                );\n            });\n            if (issueItems.length === 0) {\n                issueItems = (\n                    <p className='alert alert-success'>\n                        {'No incidents found!'}\n                    </p>\n                )\n            }\n        }\n\n        let spinnerClass = 'fa fa-refresh';\n        if (this.props.refreshing) {\n            spinnerClass += ' fa-spin';\n        }\n\n        let milestoneUrl = 'https://github.com/'+githubProject+'/milestone/';\n        milestoneUrl += this.props.milestoneNumber;\n        const seeMilestoneLink = (this.props.newestMilestone !== undefined) ? (<a href={milestoneUrl}> {'See current milestone'} </a>) : (<a href={issuesHtmlUrl}> {'See all on GitHub'}</a>);\n\n        return(\n            <div>\n                <h2>\n                    {this.props.title}\n                    <a className='float-right' href='#'>\n                        <i className={spinnerClass} onClick={this.props.refreshIssues}></i>\n                    </a>\n                </h2>\n                <p>\n                    {seeMilestoneLink}\n                    {' // '}\n                    <a href={newIssueUrl}>{'Report an incident'}</a>\n                </p>\n                {issueItems}\n            </div>\n        )\n    }\n}\n\nexport default IssuesList;","import React, { Component } from 'react'; \nimport IssuesList from './IssuesList';\nimport $ from \"jquery\";\n\nvar githubProject = 'IBM-Blockchain/blockchain-vscode-extension';\n\n//Github URLs\nvar issuesStatusApiUrl = 'https://api.github.com/repos/'+githubProject+'/issues?labels=status'\n\nclass StatusList extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            issues: undefined,\n            error: undefined,\n            refreshing: false\n        }\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    componentDidMount(){\n        this.refreshIssues()\n        // this.checkerId = setInterval(this.refreshIssues,10000);\n    }\n\n    componentWillUnmount(){\n        // clearInterval(this.refreshIssues);\n    }\n\n    refreshIssues(e){\n\n        if (e !== undefined) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            refreshing : true\n        });\n\n        var updateIssues = function(data){\n            this.setState({\n                issues : data\n            });\n            //we add a timeout to give some UI feedback on the loading even if it is instantaneous\n            setTimeout(function(){\n                this.setState({\n                    refreshing : false\n                })\n            }.bind(this),200);\n        }.bind(this)\n\n        $.get({\n            url : issuesStatusApiUrl,\n            success : updateIssues,\n            error : function(){\n                //we add a timeout to give some UI feedback on the loading even if it is instantaneous\n                setTimeout(function(){\n                    this.setState({\n                        refreshing : false\n                    });\n                }.bind(this),200);\n                this.setState({\n                    error : 'Cannot load incidents from Github, sorry.'\n                });\n            }.bind(this)\n        });\n    }\n\n    getInitialState(){\n        return {\n            refreshing : false\n        }\n    }\n    render() {\n        if (this.state.issues || this.state.error) {\n            return (\n                <div>\n                    <IssuesList \n                        key='issues' issues={this.state.issues}\n                        refreshing={this.state.refreshing}\n                        error={this.state.error}\n                        refreshIssues={this.refreshIssues}\n                        title='Latest Incidents'\n                        issueLabel='status'>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default StatusList;\n","import React, { Component } from 'react'\nimport $ from 'jquery'\nimport IssuesList from './IssuesList'\n\nvar githubProject = 'IBM-Blockchain/blockchain-vscode-extension';\n\n//Github URLs\nvar issuesNextApiUrl = 'https://api.github.com/repos/'+githubProject+'/issues?labels=next&state=closed&per_page=100'\nvar allMilestones = 'https://api.github.com/repos/'+githubProject+'/milestones'\n\nclass UpcomingList extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            issues: undefined,\n            error: undefined,\n            refreshing: false\n        }\n\n        this.refreshIssues = this.refreshIssues.bind(this);\n    }\n\n    componentDidMount(){\n        this.refreshIssues()\n        // this.checkerId = setInterval(this.refreshIssues,10000);\n    }\n\n    componentWillUnmount(){\n        // clearInterval(this.refreshIssues);\n    }\n\n    getMilestones() {\n        \n    }\n\n    refreshIssues(e){\n\n        if (e !== undefined) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            refreshing : true\n        });\n\n        var updateIssues = function(data){\n            this.setState({\n                issues : data\n            });\n            //we add a timeout to give some UI feedback on the loading even if it is instantaneous\n            setTimeout(function(){\n                this.setState({\n                    refreshing : false\n                })\n            }.bind(this),200);\n        }.bind(this)\n\n        $.get({\n            url : allMilestones,\n            success : function(data){\n                let newestMilestone;\n\n                newestMilestone = data.reduce(function(a, b) {\n                    return (a.due_on > b.due_on) ? a : b;\n                })\n\n                this.setState({\n                    newestMilestone: newestMilestone\n                });\n\n            }.bind(this),\n            error : function(){\n                //we add a timeout to give some UI feedback on the loading even if it is instantaneous\n                setTimeout(function(){this.setState({refreshing : false})}.bind(this),200)\n                this.setState({error : 'Cannot load from Github, sorry.'})}.bind(this)\n        })\n\n        $.get({\n            url : issuesNextApiUrl,\n            success : updateIssues,\n            error : function(){\n                //we add a timeout to give some UI feedback on the loading even if it is instantaneous\n                setTimeout(function(){\n                    this.setState({\n                        refreshing : false\n                    });\n                }.bind(this),200);\n                this.setState({\n                    error : 'Cannot load incidents from Github, sorry.'\n                });\n            }.bind(this)\n        });\n    }\n\n    getInitialState(){\n        return {\n            refreshing : false\n        }\n    }\n    render() {\n        let latestDueDate = '';\n        let milestoneNumber = '';\n        if (this.state.newestMilestone) {\n            const dt = new Date(this.state.newestMilestone.due_on);\n\n            // Set expected release date to milestone due_date minus days (thursday before)\n            dt.setDate(dt.getDate()-4);\n\n            latestDueDate = dt.toLocaleDateString();\n            milestoneNumber = this.state.newestMilestone.number;\n        }\n        if (this.state.issues || this.state) {\n            return (\n                <div>\n                    <IssuesList \n                        key='issues' issues={this.state.issues}\n                        refreshing={this.state.refreshing}\n                        error={this.state.error}\n                        refreshIssues={this.refreshIssues}\n                        title={'Upcoming release: expected on ' + latestDueDate}\n                        issueLabel='next'\n                        newestMilestone= {this.state.newestMilestone}\n                        milestoneNumber={milestoneNumber}>\n                    </IssuesList>\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    }\n}\n\nexport default UpcomingList","import React, { Component } from 'react';\nimport logo from './icon_light.svg';\nimport StatusList from './components/StatusList';\nimport UpcomingList from './components/UpcomingList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-15 col-md-offset-2\">\n                    <h1 className=\"text-muted\"><img className=\"logo\" src={logo} alt='IBM Blockchain Logo'></img> IBM Blockchain Platform - Status Page</h1>\n                    <hr />\n                    <p className=\"lead\">\n                        Below you can find the latest incidents as well as the information for our next release.\n                    </p>\n                    <StatusList></StatusList>\n                    <hr/>\n                    <UpcomingList></UpcomingList>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}